"use strict";
var core_1 = require("@angular/core");
var base_component_1 = require("../base.component");
var index_1 = require("../../index");
var BoardComponent = (function (_super) {
    __extends(BoardComponent, _super);
    function BoardComponent() {
        var _this = _super.call(this) || this;
        _this.rows = [];
        _this._emptySquare = null;
        return _this;
    }
    Object.defineProperty(BoardComponent.prototype, "database", {
        get: function () {
            var stateService = this.options &&
                this.options.hasOwnProperty('stateService') ? this.options.stateService : null;
            return stateService ? stateService.databaseService : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BoardComponent.prototype, "emptySquare", {
        get: function () {
            var emptyRow = this.rows.filter(function (row) {
                return row.hasOwnProperty('emptySquare') && row.emptySquare !== null;
            }), initEmptySquare = emptyRow && emptyRow.length ? emptyRow[0].emptySquare : null;
            if (this._emptySquare) {
                return this._emptySquare;
            }
            return initEmptySquare;
        },
        set: function (value) {
            this._emptySquare = value;
        },
        enumerable: true,
        configurable: true
    });
    BoardComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (this.options) {
            if (!this.options.hasOwnProperty('isSolved')) {
                this.options.isSolved = false;
            }
            if (!this.options.hasOwnProperty('sequence')) {
                this.options.sequence = this.sequence(this.options);
            }
            if (!this.options.hasOwnProperty('expectedSequence')) {
                this.options.expectedSequence = this.sequence(this.options, true);
            }
            this.rows = this.transform(this.options);
            if (this.subscriptions.length === 0) {
                if (this.options.actionService) {
                    this.subscriptions.push(this.options.actionService.actionChange$
                        .subscribe(function (action) { return _this.onActionChange(action); }));
                }
            }
        }
    };
    BoardComponent.prototype.onRowSquareClick = function ($event) {
        var row = $event[0], a = $event[1], b = this.emptySquare ? this.emptySquare : null;
        if (row && a && b) {
            if (!a.isEmpty && index_1.Utils.isValidMove(a, b)) {
                index_1.Utils.swap(a, b);
                this.persist(a);
                this.persist(b);
                this.emptySquare = a;
            }
        }
    };
    BoardComponent.prototype.onRowLeftClick = function (row) {
        if (row.emptySquare !== null) {
            this.emptySquare = row.emptySquare;
        }
    };
    BoardComponent.prototype.onRowRightClick = function (row) {
        if (row.emptySquare !== null) {
            this.emptySquare = row.emptySquare;
        }
    };
    BoardComponent.prototype.onActionChange = function (action) {
        var _this = this;
        this.unPersist();
        switch (action) {
            case index_1.ActionsEnum.PLAY:
                this.options.isSolved = false;
                break;
            case index_1.ActionsEnum.SOLVE:
                this.options.isSolved = true;
                break;
        }
        setTimeout(function () {
            _this.rows = _this.transform(_this.options);
        }, 100);
    };
    BoardComponent.prototype.sequence = function (options, expect) {
        if (expect === void 0) { expect = false; }
        var min = 1, rows = options ? options.rows : null, cols = rows ? options.cols : null, max = rows && cols ? rows * cols : 0, seq = [];
        if (max > 0) {
            if (!expect) {
                seq = index_1.Utils.generateSequence(min, max, max);
            }
            else {
                seq = index_1.Utils.generateSequentialSequence(min, max);
            }
        }
        return seq;
    };
    BoardComponent.prototype.transform = function (options) {
        var row = 1, i = 1, pos = 0, rows = options.rows, cols = options.cols, isSolved = options.isSolved, seq = options.sequence, expectedSeq = options.expectedSequence, subSeq = [], expectedSubSeq = [], store = [], stateService = options.stateService;
        for (; row <= rows; row++) {
            if (isSolved) {
                subSeq = index_1.Utils.parseSubSequence(expectedSeq, pos, cols);
            }
            else {
                subSeq = index_1.Utils.parseSubSequence(seq, pos, cols);
            }
            expectedSubSeq = index_1.Utils.parseSubSequence(expectedSeq, pos, cols);
            store.push({
                index: i,
                isLast: row === rows ? true : false,
                sequence: subSeq,
                expectedSequence: expectedSubSeq,
                stateService: stateService
            });
            i++;
            pos += cols;
        }
        return store;
    };
    BoardComponent.prototype.unPersist = function () {
        var databaseService = this.database;
        if (databaseService) {
            databaseService.zero('row');
        }
    };
    BoardComponent.prototype.persist = function (options) {
        var databaseService = this.database;
        if (databaseService) {
            databaseService.push(options.id, options);
        }
    };
    return BoardComponent;
}(base_component_1.BaseComponent));
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], BoardComponent.prototype, "options", void 0);
BoardComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'pz-board',
        templateUrl: 'board.component.html',
        styleUrls: [
            'board.component.css',
        ],
    }),
    __metadata("design:paramtypes", [])
], BoardComponent);
exports.BoardComponent = BoardComponent;
//# sourceMappingURL=data:application/json;base64,